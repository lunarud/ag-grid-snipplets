
<dx-data-grid 
    id="gridContainer" 
    [dataSource]="orders"
    [showBorders]="true">
    <dxo-filter-row 
        [visible]="showFilterRow" 
        [applyFilter]="currentFilter"></dxo-filter-row>
    <dxo-header-filter 
        [visible]="showHeaderFilter"></dxo-header-filter>
    <dxo-search-panel 
        [visible]="true" 
        [width]="240" 
        placeholder="Search..."></dxo-search-panel>
    <dxi-column 
        dataField="OrderNumber" 
        [width]="140" 
        caption="Invoice Number">
        <dxo-header-filter 
            [groupInterval]="10000"></dxo-header-filter>
    </dxi-column>
    <dxi-column 
        dataField="OrderDate" 
        alignment="right" 
        dataType="date"
        [width]="120"
        [calculateFilterExpression]="calculateFilterExpression">
        <dxo-header-filter 
            [dataSource]="orderHeaderFilter"></dxo-header-filter>
    </dxi-column>
    <dxi-column 
        dataField="DeliveryDate" 
        alignment="right" 
        dataType="datetime"
        format="M/d/yyyy, HH:mm"
        [width]="180"></dxi-column>
    <dxi-column 
        dataField="SaleAmount" 
        alignment="right" 
        format="currency"
        [editorOptions]="{ format: 'currency', showClearButton: true }">
        <dxo-header-filter 
            [dataSource]="saleAmountHeaderFilter"></dxo-header-filter>
    </dxi-column>
    <dxi-column dataField="Employee"></dxi-column>
    <dxi-column 
        dataField="CustomerStoreCity" 
        caption="City">
        <dxo-header-filter [allowSearch]="true"></dxo-header-filter>
    </dxi-column>
</dx-data-grid>
<div class="options">
    <div class="caption">Options</div>
    <div class="option">
        <span>Apply Filter</span>
        <dx-select-box
            id="useFilterApplyButton" 
            [items]="applyFilterTypes" 
            [(value)]="currentFilter" 
            valueExpr="key"
            displayExpr="name"
            [disabled]="!showFilterRow"></dx-select-box>
    </div>
    <div class="option">
    <dx-check-box 
        text="Filter Row" 
        [(value)]="showFilterRow" 
        (onValueChanged)="clearFilter()"></dx-check-box>
    </div>
    <div class="option">
    <dx-check-box 
        text="Header Filter" 
        [(value)]="showHeaderFilter" 
        (onValueChanged)="clearFilter()"></dx-check-box>
    </div>
</div>





import { NgModule, Component, ViewChild, enableProdMode } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { DxDataGridComponent,
         DxDataGridModule,
         DxSelectBoxModule,
         DxCheckBoxModule } from 'devextreme-angular';

import { Order, Service } from './app.service';


@Component({
    selector: 'demo-app',
    providers: [ Service ],
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
    preserveWhitespaces: true
})

export class AppComponent {
    @ViewChild(DxDataGridComponent, { static: false }) dataGrid: DxDataGridComponent;
    orders: Order[];
    saleAmountHeaderFilter: any;
    applyFilterTypes: any;
    currentFilter: any;
    showFilterRow: boolean;
    showHeaderFilter: boolean;

    constructor(service: Service) {
        this.orders = service.getOrders();
        this.showFilterRow = true;
        this.showHeaderFilter = true;
        this.applyFilterTypes = [{
            key: "auto",
            name: "Immediately"
        }, {
            key: "onClick",
            name: "On Button Click"
        }];
        this.saleAmountHeaderFilter = [{
            text: "Less than $3000",
            value: ["SaleAmount", "<", 3000]
        }, {
            text: "$3000 - $5000",
            value: [
                ["SaleAmount", ">=", 3000],
                ["SaleAmount", "<", 5000]
            ]
        }, {
            text: "$5000 - $10000",
            value: [
                ["SaleAmount", ">=", 5000],
                ["SaleAmount", "<", 10000]
            ]
        }, {
            text: "$10000 - $20000",
            value: [
                ["SaleAmount", ">=", 10000],
                ["SaleAmount", "<", 20000]
            ]
        }, {
            text: "Greater than $20000",
            value: ["SaleAmount", ">=", 20000]
        }];
        this.currentFilter = this.applyFilterTypes[0].key;
        this.orderHeaderFilter = this.orderHeaderFilter.bind(this);
    }

    private static getOrderDay(rowData) {
        return (new Date(rowData.OrderDate)).getDay();
    }

    calculateFilterExpression(value, selectedFilterOperations, target) {
        let column = this as any;
        if(target === "headerFilter" && value === "weekends") {
            return [[AppComponent.getOrderDay, "=", 0], "or", [AppComponent.getOrderDay, "=", 6]];
        }
        return column.defaultCalculateFilterExpression.apply(this, arguments);
    }

    orderHeaderFilter(data) {
        data.dataSource.postProcess = (results) => {
            results.push({
                text: "Weekends",
                value: "weekends"
            });
            return results;
        };
    }

    clearFilter() {
        this.dataGrid.instance.clearFilter();
    }
}

@NgModule({
    imports: [
        BrowserModule,
        DxDataGridModule,
        DxSelectBoxModule,
        DxCheckBoxModule
    ],
    declarations: [AppComponent],
    bootstrap: [AppComponent]
})
export class AppModule { }
